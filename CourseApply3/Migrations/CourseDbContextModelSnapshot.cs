// <auto-generated />
using System;
using CourseApply3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseApply3.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    partial class CourseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+AdminProperty", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+AnswerProperty", b =>
                {
                    b.Property<int>("AnswerPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswerPropertyId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+ExamProperty", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserInformationUserInformtionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExamId");

                    b.HasIndex("UserInformationUserInformtionId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+QuestionProperty", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+UserInformation", b =>
                {
                    b.Property<int>("UserInformtionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserInformtionId");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInformations");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+UserProperty", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePictureData")
                        .HasColumnType("BLOB");

                    b.Property<string>("ProfilePictureMimeType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserInformationUserInformtionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UsersId");

                    b.HasIndex("UserInformationUserInformtionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+ExamProperty", b =>
                {
                    b.HasOne("CourseApply3.Models.CourseProperty+UserInformation", "UserInformation")
                        .WithMany()
                        .HasForeignKey("UserInformationUserInformtionId");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+QuestionProperty", b =>
                {
                    b.HasOne("CourseApply3.Models.CourseProperty+ExamProperty", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+UserInformation", b =>
                {
                    b.HasOne("CourseApply3.Models.CourseProperty+ExamProperty", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseApply3.Models.CourseProperty+UserProperty", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+UserProperty", b =>
                {
                    b.HasOne("CourseApply3.Models.CourseProperty+UserInformation", "UserInformation")
                        .WithMany()
                        .HasForeignKey("UserInformationUserInformtionId");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("CourseApply3.Models.CourseProperty+ExamProperty", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
